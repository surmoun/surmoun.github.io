<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【STM32】STM32的老人健康及跌倒检测系统</title>
      <link href="/posts/2024/2536639252.html"/>
      <url>/posts/2024/2536639252.html</url>
      
        <content type="html"><![CDATA[<h2 id="系统功能"><a href="#系统功能" class="headerlink" title="系统功能"></a>系统功能</h2><p>1.能实时检测老人的心率血氧，血压，体温，身体姿态。<br>2.能通过GPS定位实时定位获取老人所在的经纬度。<br>3.数据实时上传阿里云通过云流转传输到android APP界面上。<br>4.当老人心率血氧，血压，体温异常时设备会进行语音报警，并将异常数据传输到手机APP上，手机收到异常数据会发出震动以及铃响。<br>5.当老人发生摔倒时，设备会大约15秒的时间报警(蜂鸣器响和语音播报)，如老人身体无碍，则可以进行按键取消报警；同时老人在需要时可以通过手动报警按键进行报警求助，手机APP会收到老人摔倒以及求助的信息。<br>6.设备带OLED显示器可显示老人的身体情况信息；手机APP附带地图显示老人的实时位置<br>7.手机APP可设置老人身体数据异常的阈值。</p><p><img src="https://s21.ax1x.com/2024/07/27/pkqEBVJ.png" alt="硬件图"></p><h2 id="系统概述"><a href="#系统概述" class="headerlink" title="系统概述"></a>系统概述</h2><p>本系统以C语言为开发语言，基于STM32标准库设计与实现了一种老年人人身安全监护系统。本系统主要包含七个功能模块，分别是：心率血氧监测、跌倒监测、血压监测、红外体温监测、GPS定位、显示和数据传输。本系统首先使用传感器进行血压等数据的监测，GPS获取定位信息，屏幕显示老人的状态，然后系统通过WIFI连接，进行数据传输，通过手机APP查看状态。该系统的实现，不仅能够及时发现老年人身体状况异常，提高老年人的人身安全性，避免意外事件的发生，而且以物联网+健康为核心的智慧监测模式有望得到广泛推广和应用，为老年人带来更高质量更安全的晚年生活保障。</p><h2 id="系统功能分析"><a href="#系统功能分析" class="headerlink" title="系统功能分析"></a>系统功能分析</h2><p><img src="https://s21.ax1x.com/2024/07/27/pkqE3Us.png" alt="系统架构图"></p><p>本系统主要的功能包括以下7种功能模块。</p><p>（1）心率血氧监测模块：以MAX30102为核心，用来监控老年人的心跳和脉搏。</p><p>（2）跌倒监测模块：利用MPU6050的加速度及角度速率对摔倒进行判定。</p><p>（3）血压监测模块：用MSP20进行血压的监测。</p><p>（4）红外测温模块：主要通过GY-906-DAA进行测温。</p><p>（5）GPS模块：通过串口接收到ATGM336H（GPS）的数据。</p><p>（6）显示模块：直观显示老年人的身体状况，是否跌倒的状态。</p><p>（7）数据传输模块：通过ESP8266模块实现网络的互联。</p><h3 id="心率血氧功能分析"><a href="#心率血氧功能分析" class="headerlink" title="心率血氧功能分析"></a>心率血氧功能分析</h3><p>在本系统中通过MAX30102心率血氧传感器当手指放到芯片上，进行获取心率和血氧的数据，传送到STM32进行处理。</p><h3 id="跌倒监测功能分析"><a href="#跌倒监测功能分析" class="headerlink" title="跌倒监测功能分析"></a>跌倒监测功能分析</h3><p>系统使用MPU-6050传感器判断老人是否发生跌倒。该传感器能够检测老人的身体姿势和运动状态，当检测到异常的加速度变化模式时，判定为可能发生跌倒，并触发相应的报警机制，以便及时提供援助。</p><h3 id="血压传感器模块分析"><a href="#血压传感器模块分析" class="headerlink" title="血压传感器模块分析"></a>血压传感器模块分析</h3><p>系统采用了MSP20血压传感器，通过模数转换（ADC）技术来读取数据。然后将采集到的信息发送给STM32单片机，并对其进行平均处理。以获得更为准确的电压值。然后，将得到的平均电压值进行放大处理，再经过计算过程，最终得到精确的血压值。</p><h3 id="红外测温模块功能分析"><a href="#红外测温模块功能分析" class="headerlink" title="红外测温模块功能分析"></a>红外测温模块功能分析</h3><p>该模块采用GY-906-DAA型红外线测温装置对使用者的身体温度进行监测，并将测量结果传送至STM32单片机进行分析。</p><h3 id="GPS定位模块分析"><a href="#GPS定位模块分析" class="headerlink" title="GPS定位模块分析"></a>GPS定位模块分析</h3><p>系统通过ATGM336H传感器使用串口发送定位信息到STM32，将所获得的时间进行分析、分析，并将其转换为所需要的数据。传送给云平台进行地图显示。</p><h3 id="显示模块功能分析"><a href="#显示模块功能分析" class="headerlink" title="显示模块功能分析"></a>显示模块功能分析</h3><p>显示模块需要对老年人当前的人身状态，健康情况的监测数据进行显示，系统通过IIC通信将数据显示到OLED屏幕，更直观看出各项数据以及状态。</p><h3 id="数据传输功能分析"><a href="#数据传输功能分析" class="headerlink" title="数据传输功能分析"></a>数据传输功能分析</h3><p>系统使用ESP8266与阿里云平台进行数据传输，APP端进行上传的数据的显示，以及报警的通知显示。</p><p><img src="https://s21.ax1x.com/2024/07/27/pkqEJCq.png" alt="手机APP"></p><p><img src="https://s21.ax1x.com/2024/07/27/pkqEt2V.png" alt="阿里云平台"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在毕业设计的整个过程中，经过广泛阅读各种各样的文献资料，精心设计并成功实现出了老年人人身安全监护系统。通过此次毕业设计，学会了STM32单片机以及传感器的编程思路，极大地锻炼了自身的编程能力。从书本上看似清晰明了的知识过渡到实际操作实物时的茫然无措，然而通过持续不断地学习以及虚心请教他人，积极努力地去克服在编码过程中遇到的种种困难，这也为我将来的学习路线提供了更想要深入去了解和探索的浓厚兴趣。</p><p>通过本次毕业设计的推进与完成，不但切实地将理论与实践紧密地进行了结合，而且还进一步拓展了自己的知识储备量。深入了解了一个系统从最初的设计需求确立，到功能逐步实现，再到功能测试的全部完整过程。这无疑为我未来的工作积累了极为难得的宝贵经验，让我能够以更加从容自信的姿态去面对未来职业生涯中的各种挑战和机遇。</p>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring篇】模拟网站登录获取Token</title>
      <link href="/posts/2024/3361359797.html"/>
      <url>/posts/2024/3361359797.html</url>
      
        <content type="html"><![CDATA[<h2 id="模拟登录访问获取token"><a href="#模拟登录访问获取token" class="headerlink" title="模拟登录访问获取token"></a>模拟登录访问获取token</h2><img src="https://s21.ax1x.com/2024/07/18/pkowdV1.png" alt="后台管理系统界面" style="zoom: 33%;" /><blockquote><p>当进行访问一个网站都会进行登录相关的操作，在想获取该网站token的时候，可以进行登录后拿到该网站的token  可作为的用途我们可以把网站token拿到，做一些接口进行操作。</p></blockquote><p>本文基于VUE+SpringBoot框架进行开发的后台管理系统上进行模拟登录，验证码解码获取 获取token操作。</p><h2 id="后台接口的请求处理"><a href="#后台接口的请求处理" class="headerlink" title="后台接口的请求处理"></a>后台接口的请求处理</h2><p>当在使用网站时首先进行login页面的查找，因为有些页面会让我们去get请求，从而在本机浏览器环境下生成Cookie信息，<strong>生成原因呢？</strong>就是他在post请求的时候也会去携带Cookie的数据，如下图所示。</p><img src="https://s21.ax1x.com/2024/07/18/pkowqqs.png" alt="Cookie" style="zoom: 50%;" /><p>有些网站也是很好去模拟登录的，他不需要我们去进行get请求页面生产cookie可以直接进行post数据请求把登录的info信息进行发送过去进行验证登录即可。</p><img src="https://s21.ax1x.com/2024/07/18/pko0SRU.png" alt="直接请求的login接口" style="zoom:50%;" /><p>在请求网站的时候使用到的代码-&gt; 该环境是在SpringBoot框架下进行操作的。  </p><p>导入主要使用到的依赖环境</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，进行登录页的请求，使用的是restTemplate模板下的exchange方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ResponseEntity&lt;T&gt; <span class="title function_">exchange</span><span class="params">(URI url, HttpMethod method, <span class="meta">@Nullable</span> HttpEntity&lt;?&gt; requestEntity,</span></span><br><span class="line"><span class="params">        ParameterizedTypeReference&lt;T&gt; responseType)</span> <span class="keyword">throws</span> RestClientException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> url – the URL   网站的URL</span></span><br><span class="line"><span class="comment"> method – the HTTP method (GET, POST, etc)  网站进行请求的方法 </span></span><br><span class="line"><span class="comment"> requestEntity – the entity (headers and/or body) to write to the request (may be null)  请求头和请求体</span></span><br><span class="line"><span class="comment"> responseType – the type of the return value              返回指定类型值</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>在进行网站模拟请求的时候永远绕不过去的就是验证码环节，因为Java不像python那样有强大的爬虫库可以操作，本次操作是基于第三方API接口进行的操作。</p><p><img src="https://s21.ax1x.com/2024/07/18/pko0yF0.png" alt="验证码"></p><h2 id="模拟验证码操作-获取验证码"><a href="#模拟验证码操作-获取验证码" class="headerlink" title="模拟验证码操作 获取验证码"></a><strong>模拟验证码操作</strong> 获取验证码</h2><p>本次模拟接口是 <a href="http://localhost:8501/admin/system/index/generateValidateCode">http://localhost:8501/admin/system/index/generateValidateCode</a>  自己搭建生产的验证码验证服务。</p><p><img src="https://s21.ax1x.com/2024/07/18/pko0cWT.png" alt="验证码请求数据"></p><p>在请求该接口的时候获取到 code，message，data三个json数据，我们主要对data的数据codeKey和codeValue进行操作。</p><p>该codeValue的数据是base64图片格式数据，我们就得数据拿到发送到我们api处理接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line"> headers.add(<span class="string">&quot;User-Agent&quot;</span>,<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 SLBrowser/9.0.3.5211 SLBChan/112&quot;</span>);</span><br><span class="line"> HttpEntity&lt;MultiValueMap&lt;String,String&gt;&gt; startPage  = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(headers);  <span class="comment">// 构建请求头和请求体</span></span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"> <span class="type">URI</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URI</span>(ValidateCodeUrl);                                              <span class="comment">//转换成URI的格式</span></span><br><span class="line"> ResponseEntity&lt;String&gt; response = restTemplate.exchange(url,HttpMethod.GET,startPage,String.class);</span><br><span class="line"> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();                                       <span class="comment">//使用FastJson进行处理</span></span><br><span class="line"> <span class="type">JsonNode</span> <span class="variable">jsonNode</span> <span class="operator">=</span> mapper.readTree(response.getBody());</span><br><span class="line"> <span class="type">String</span>  <span class="variable">codeKey</span> <span class="operator">=</span> String.valueOf(jsonNode.get(<span class="string">&quot;data&quot;</span>).get(<span class="string">&quot;codeKey&quot;</span>)).replaceAll(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"> <span class="type">String</span> <span class="variable">Imgbase</span> <span class="operator">=</span> String.valueOf(jsonNode.get(<span class="string">&quot;data&quot;</span>).get(<span class="string">&quot;codeValue&quot;</span>)).replaceAll(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>拿到data中的Imgbase数据，接下来使用API的接口进行操作，可查看官方端口进行查看<a href="https://www.jfbym.com/price.html">https://www.jfbym.com/price.html</a></p><p><img src="https://s21.ax1x.com/2024/07/18/pko0LlD.png" alt="识别成功"></p><blockquote><p>&#x2F;&#x2F; # 通用数英1-4位 10110</p><p>&#x2F;&#x2F; # 通用数英5-8位 10111                                                    规定接口上传数据必须<strong>base64</strong></p><p>&#x2F;&#x2F; # 通用数英9~11位 10112                   </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">commonVerify</span><span class="params">(String imageContent)</span> <span class="keyword">throws</span> URISyntaxException &#123;</span><br><span class="line">    String verify_type;</span><br><span class="line">    verify_type = <span class="string">&quot;10110&quot;</span>;</span><br><span class="line">    <span class="type">HttpHeaders</span> <span class="variable">verifyHeader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    verifyHeader.add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    jsonObject.put(<span class="string">&quot;image&quot;</span>, imageContent);</span><br><span class="line">    jsonObject.put(<span class="string">&quot;type&quot;</span>, verify_type);</span><br><span class="line">    jsonObject.put(<span class="string">&quot;token&quot;</span>, Token);</span><br><span class="line">    <span class="type">HttpEntity</span> <span class="variable">startEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(jsonObject,verifyHeader);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;startEntity = &quot;</span> + startEntity);</span><br><span class="line">    <span class="type">URI</span> <span class="variable">captch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URI</span>(CustomUrl);</span><br><span class="line">    ResponseEntity&lt;String&gt; response = restTemplate.exchange(captch,HttpMethod.POST,startEntity,String.class);</span><br><span class="line">    System.out.println(response);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进行模拟登录"><a href="#进行模拟登录" class="headerlink" title="进行模拟登录"></a>进行模拟登录</h2><p>在通过commonVerify接口完成验证码的识别后，将获取到的数据进行构建json数据<strong>mapper.readTree</strong>，在jsonNode中拿去所需要的数据。</p><p><img src="https://s21.ax1x.com/2024/07/18/pko0x0A.png" alt="返回参数"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ResponseEntity&lt;String&gt; response1 = commonVerify(Imgbase);</span><br><span class="line">jsonNode = mapper.readTree(response1.getBody());</span><br><span class="line"><span class="type">String</span> <span class="variable">captcha</span> <span class="operator">=</span> String.valueOf(jsonNode.get(<span class="string">&quot;data&quot;</span>).get(<span class="string">&quot;data&quot;</span>)).replaceAll(<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">HttpHeaders</span> <span class="variable">postHeader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">postHeader.add(<span class="string">&quot;User-Agent&quot;</span>,<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 SLBrowser/9.0.3.5211 SLBChan/112&quot;</span>);</span><br><span class="line">         </span><br></pre></td></tr></table></figure><blockquote><p>在此我们就拿到了codekey和codeValue  再配上我们所添加的username和password 就构建登录请求体数据</p></blockquote><p>在此也需要判断 login请求需要的是json格式还是其余格式。</p><img src="https://s21.ax1x.com/2024/07/18/pkoBe7n.png" alt="第一种" style="zoom: 50%;" /><p>根据所需要的格式，去构建HttpEntity的实体类，该操作是请求体和请求头的方式，请求体通过json的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">postHeader.add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">         <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">         jsonObject.put(<span class="string">&quot;userName&quot;</span>, username);</span><br><span class="line">         jsonObject.put(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">         jsonObject.put(<span class="string">&quot;captcha&quot;</span>, captcha);</span><br><span class="line">         jsonObject.put(<span class="string">&quot;codeKey&quot;</span>, codeKey);</span><br><span class="line"></span><br><span class="line">         <span class="type">HttpEntity</span> <span class="variable">httpEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(jsonObject,postHeader);</span><br><span class="line"></span><br><span class="line">         url = <span class="keyword">new</span> <span class="title class_">URI</span>(loginUrl);</span><br><span class="line">         ResponseEntity&lt;String&gt; exchange = restTemplate.exchange(url, HttpMethod.POST, httpEntity, String.class);</span><br><span class="line">         System.out.println(<span class="string">&quot;exchange = &quot;</span> + exchange);</span><br></pre></td></tr></table></figure><p>完成，获取到token数据！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringBoot篇】登录校验拦截器设置</title>
      <link href="/posts/2024/639972599.html"/>
      <url>/posts/2024/639972599.html</url>
      
        <content type="html"><![CDATA[<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>后台管理系统中除了登录接口、获取验证码的接口在访问的时候不需要验证用户的登录状态，其余的接口在访问的时候都必须要求用户登录成功以后才可以进行访问。</p><p>登录过程<br><img src="https://s21.ax1x.com/2024/07/16/pkIRPi9.png" alt="拦截器配置过程"></p><p><img src="https://s21.ax1x.com/2024/07/16/pkI2xqU.png" alt="拦截器配置说明"></p><blockquote><p>前端请求url 经过拦截器（放行登录和验证码）进行判断获取到token，从Redis中查询数据是否存在，<br>若数据存在放在ThreadLocal线程变量中，更新redis token存储的时间并放行<br>若不存在返回208状态码 返回前端页面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spzx.common.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spzx.model.entity.system.SysUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthContextUtil</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个ThreadLocal对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SysUser&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;() ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义存储数据的静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(SysUser sysUser)</span> &#123;</span><br><span class="line">        threadLocal.set(sysUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义获取数据的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SysUser <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get() ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除数据的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="拦截器Hander"><a href="#拦截器Hander" class="headerlink" title="拦截器Hander"></a>拦截器Hander</h2><blockquote><p>UserAuthProperties 用于读取yml中的参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spzx.auth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAuthProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt;  noAuthUrls;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginAuthInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate&lt;String , String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取预检请求放行</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;OPTIONS&quot;</span>.equals(method))&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取得token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isEmpty(token))</span><br><span class="line">        &#123;</span><br><span class="line">            responseNoLoginInfo(response) ;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//得到用户json</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userInfoJSON</span> <span class="operator">=</span> redisTemplate.opsForValue().get(CacheConstant.User_Login_Prefix + token);</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isEmpty(userInfoJSON))</span><br><span class="line">        &#123;</span><br><span class="line">            responseNoLoginInfo(response) ;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//json存到threadLocal</span></span><br><span class="line">        <span class="type">SysUser</span> <span class="variable">sysUser</span> <span class="operator">=</span> JSON.parseObject(userInfoJSON, SysUser.class);</span><br><span class="line">        AuthContextUtil.set(sysUser);</span><br><span class="line">        <span class="comment">//重置redis</span></span><br><span class="line"></span><br><span class="line">        redisTemplate.expire(CacheConstant.User_Login_Prefix + token,<span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">responseNoLoginInfo</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        Result&lt;Object&gt; result = Result.build(<span class="literal">null</span>, ResultCodeEnum.LOGIN_AUTH);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html; charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer = response.getWriter();</span><br><span class="line">            writer.print(JSON.toJSONString(result));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (writer != <span class="literal">null</span>) writer.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        AuthContextUtil.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span>  <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    LoginAuthInterceptor loginAuthInterceptor;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserAuthProperties userAuthProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*登录校验</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(loginAuthInterceptor)</span><br><span class="line">                .excludePathPatterns(userAuthProperties.getNoAuthUrls())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*CROS跨域</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)      <span class="comment">// 添加路径规则</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)               <span class="comment">// 是否允许在跨域的情况下传递Cookie</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)           <span class="comment">// 允许请求来源的域规则</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>) ;                <span class="comment">// 允许所有的请求头</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringBoot篇】自定义异常处理</title>
      <link href="/posts/2024/2677420933.html"/>
      <url>/posts/2024/2677420933.html</url>
      
        <content type="html"><![CDATA[<h2 id="🎈异常处理"><a href="#🎈异常处理" class="headerlink" title="🎈异常处理"></a>🎈异常处理</h2><p>在 Java 中，自定义异常是指用户根据自己的需求创建的异常类。Java 提供了一些预定义的异常类，如 <strong>NullPointerException</strong>、<strong>ArrayIndexOutOfBoundsException</strong>等，但有时这些预定义的异常类并不能完全满足我们的需求。在这种情况下，我们可以通过创建自定义异常类来表示特定的异常情况。</p><p>自定义异常类通常继承自 Exception 类或 RuntimeException 类，以及它们的子类，并根据需要添加相应的构造方法和其他方法以满足特定的异常处理需求，自定义异常类可以包含额外的属性和方法，以提供更多的信息和功能。</p><p>使用自定义异常类时，通常的做法是在方法中使用 throw 语句来抛出自定义异常，然后在调用该方法的地方使用 try-catch 语句块来捕获并处理异常。</p><p><img src="https://s21.ax1x.com/2024/07/16/pkI2JUJ.png" alt="异常类"></p><blockquote><p>我们想让异常结果也显示为统一的返回结果对象，并且统一处理系统的异常信息，那么，需要统一异常处理</p></blockquote><h2 id="🎆统一异常处理器"><a href="#🎆统一异常处理器" class="headerlink" title="🎆统一异常处理器"></a>🎆统一异常处理器</h2><blockquote><p>@ExceptionHandler(Exception.class)<br>@ControllerAdvice</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一异常处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHander</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">error</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span>  Result.build(<span class="literal">null</span>,<span class="number">201</span>,<span class="string">&quot;出现了异常&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 特定的异常处理</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">error</span><span class="params">(ArithmeticException e)</span>&#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">       <span class="keyword">return</span>  Result.build(<span class="literal">null</span>,<span class="number">202</span>,<span class="string">&quot;特定的异常&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="🎀自定义异常"><a href="#🎀自定义异常" class="headerlink" title="🎀自定义异常"></a>🎀自定义异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GuiguException</span>  <span class="keyword">extends</span>  <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer CODE;</span><br><span class="line">    <span class="keyword">private</span> String  message;</span><br><span class="line">    <span class="keyword">private</span> ResultCodeEnum resultCodeEnum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GuiguException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GuiguException</span><span class="params">(Integer CODE, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.CODE = CODE;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GuiguException</span><span class="params">(ResultCodeEnum resultCodeEnum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.CODE = resultCodeEnum.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = resultCodeEnum.getMessage();</span><br><span class="line">        <span class="built_in">this</span>.resultCodeEnum = resultCodeEnum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(GuiguException.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">error</span><span class="params">(GuiguException e)</span></span><br><span class="line">&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> Result.build(<span class="literal">null</span>,e.getCODE(),e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringBoot篇】阿里云OSS--文件存储</title>
      <link href="/posts/2024/2973527109.html"/>
      <url>/posts/2024/2973527109.html</url>
      
        <content type="html"><![CDATA[<h2 id="🌹什么是阿里云OSS"><a href="#🌹什么是阿里云OSS" class="headerlink" title="🌹什么是阿里云OSS"></a>🌹什么是阿里云OSS</h2><p>阿里云对象存储（Alibaba Cloud Object Storage Service，简称OSS）是阿里云提供的海量、安全、低成本、高可靠的云存储服务。用户可以通过简单的API接口在任何时间、任何地点上传和下载数据，适用于图像、音视频、文档、网站等各种类型的数据存储和分发场景。</p><h2 id="⭐阿里云OSS的优点"><a href="#⭐阿里云OSS的优点" class="headerlink" title="⭐阿里云OSS的优点"></a>⭐阿里云OSS的优点</h2><p><strong>高可靠性</strong>：OSS采用了多副本存储和容灾备份机制，确保数据的高可靠性和持久性。<br><strong>安全性</strong>：支持多种安全策略，如访问控制、加密传输等，保障数据的安全性。<br><strong>弹性扩展</strong>：支持按需存储和弹性扩展，用户可以根据实际需求灵活调整存储容量。<br><strong>低成本</strong>：OSS的存储费用低廉，且支持按量付费模式，使用户能够根据实际使用量付费</p><h2 id="🏳️‍🌈为什么要使用云服务OSS"><a href="#🏳️‍🌈为什么要使用云服务OSS" class="headerlink" title="🏳️‍🌈为什么要使用云服务OSS"></a>🏳️‍🌈为什么要使用云服务OSS</h2><p>解决本地存储无法直接访问，本地磁盘空间有限，本地磁盘损坏这3个问题</p><h2 id="🎄使用步骤"><a href="#🎄使用步骤" class="headerlink" title="🎄使用步骤"></a>🎄使用步骤</h2><p><img src="https://img2024.cnblogs.com/blog/1931734/202406/1931734-20240604073206273-1833203380.png" alt="image"></p><h2 id="文件上传操作"><a href="#文件上传操作" class="headerlink" title="文件上传操作"></a>文件上传操作</h2><hr><blockquote><p>🎈在pom文件中添加下面的代码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;aliyun.sdk.oss&gt;3.10.2&lt;/aliyun.sdk.oss&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;$&#123;aliyun.sdk.oss&#125;&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>🎈本地存储的话 在yml中写明存储地方</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ali:</span><br><span class="line">  spring:</span><br><span class="line">    localhost: D:\Program Files\Project\Test-Project\TEST01\alioosdemo\ali-service\src\main\resources\upload</span><br></pre></td></tr></table></figure><blockquote><p>🎈在Controller层进行上传操作</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/api/common&quot;)</span><br><span class="line"></span><br><span class="line">public class CommonController &#123;</span><br><span class="line">    @Value(&quot;$&#123;ali.spring.localhost&#125;&quot;)</span><br><span class="line">    private  String path;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AliOssUtil aliOssUtil;</span><br><span class="line">    /**</span><br><span class="line">     * 文件上传</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(&quot;upload&quot;)</span><br><span class="line">    public String Upload(MultipartFile file) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        //获取原始名</span><br><span class="line">        String originalFilename = file.getOriginalFilename();</span><br><span class="line">        //截取 .png</span><br><span class="line">        String substring = originalFilename.substring(originalFilename.lastIndexOf(&quot;.&quot;));</span><br><span class="line">        //构造一个新名称  使用Hutool工具类</span><br><span class="line">        String filename = IdUtil.simpleUUID() + substring;</span><br><span class="line">//新建File对象 进行存储</span><br><span class="line">        File file1 = new File(filename);</span><br><span class="line">     try &#123;</span><br><span class="line">            file.transferTo(file1);</span><br><span class="line">         &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">         &#125;</span><br><span class="line">         return  &quot;上传成功&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件上传操作（OSS版）"><a href="#文件上传操作（OSS版）" class="headerlink" title="文件上传操作（OSS版）"></a>文件上传操作（OSS版）</h2><blockquote><p>🎈Oss存储 在yml中写明存储地方 <strong>access-key-id</strong>、 <strong>access-key-secret</strong>、<strong>bucket-name</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ali:</span><br><span class="line">  alioos:</span><br><span class="line">    endpoint: oss-cn-beijing.aliyuncs.com</span><br><span class="line">    access-key-id: ***********</span><br><span class="line">    access-key-secret: ***********</span><br><span class="line">    bucket-name: ***********</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用@ConfigurationProperties注解读取 properties的数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*</span><br><span class="line">*@Component 表示将该类标识为Bean</span><br><span class="line">*@ConfigurationProperties(prefix = &quot;ali.alioos&quot;)用于绑定属性，其中prefix表示所绑定的属性的前缀。</span><br><span class="line">**/</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;ali.alioos&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class AliOssProprtyies &#123;</span><br><span class="line">    private String endpoint;</span><br><span class="line">    private String accessKeyId;</span><br><span class="line">    private String accessKeySecret;</span><br><span class="line">    private String bucketName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置类，用于创建AliOssUtil对象</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class OssConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @ConditionalOnMissingBean</span><br><span class="line">    public AliOssUtil aliOssUtil(AliOssProprtyies aliOssProprtyies)&#123;</span><br><span class="line">        return  new AliOssUtil(aliOssProprtyies.getEndpoint(),</span><br><span class="line">                    aliOssProprtyies.getAccessKeyId(),</span><br><span class="line">                    aliOssProprtyies.getAccessKeySecret(),</span><br><span class="line">                aliOssProprtyies.getBucketName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>定义阿里云工具类</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@Slf4j</span><br><span class="line">public class AliOssUtil &#123;</span><br><span class="line"></span><br><span class="line">    private String endpoint;</span><br><span class="line">    private String accessKeyId;</span><br><span class="line">    private String accessKeySecret;</span><br><span class="line">    private String bucketName;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 文件上传</span><br><span class="line">     *</span><br><span class="line">     * @param bytes</span><br><span class="line">     * @param objectName</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public String upload(byte[] bytes, String objectName) &#123;</span><br><span class="line"></span><br><span class="line">        // 创建OSSClient实例。</span><br><span class="line">        OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // 创建PutObject请求。</span><br><span class="line">            ossClient.putObject(bucketName, objectName, new ByteArrayInputStream(bytes));</span><br><span class="line">        &#125; catch (OSSException oe) &#123;</span><br><span class="line">            System.out.println(&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span><br><span class="line">                    + &quot;but was rejected with an error response for some reason.&quot;);</span><br><span class="line">            System.out.println(&quot;Error Message:&quot; + oe.getErrorMessage());</span><br><span class="line">            System.out.println(&quot;Error Code:&quot; + oe.getErrorCode());</span><br><span class="line">            System.out.println(&quot;Request ID:&quot; + oe.getRequestId());</span><br><span class="line">            System.out.println(&quot;Host ID:&quot; + oe.getHostId());</span><br><span class="line">        &#125; catch (ClientException ce) &#123;</span><br><span class="line">            System.out.println(&quot;Caught an ClientException, which means the client encountered &quot;</span><br><span class="line">                    + &quot;a serious internal problem while trying to communicate with OSS, &quot;</span><br><span class="line">                    + &quot;such as not being able to access the network.&quot;);</span><br><span class="line">            System.out.println(&quot;Error Message:&quot; + ce.getMessage());</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (ossClient != null) &#123;</span><br><span class="line">                ossClient.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //文件访问路径规则 https://BucketName.Endpoint/ObjectName</span><br><span class="line">        StringBuilder stringBuilder = new StringBuilder(&quot;https://&quot;);</span><br><span class="line">        stringBuilder</span><br><span class="line">                .append(bucketName)</span><br><span class="line">                .append(&quot;.&quot;)</span><br><span class="line">                .append(endpoint)</span><br><span class="line">                .append(&quot;/&quot;)</span><br><span class="line">                .append(objectName);</span><br><span class="line"></span><br><span class="line">        log.info(&quot;文件上传到:&#123;&#125;&quot;, stringBuilder.toString());</span><br><span class="line"></span><br><span class="line">        return stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>自定义上传接口</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private AliOssUtil aliOssUtil;</span><br><span class="line">/**</span><br><span class="line"> * 文件上传</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@PostMapping(&quot;upload&quot;)</span><br><span class="line">public String Upload(MultipartFile file) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    //获取原始名</span><br><span class="line">    String originalFilename = file.getOriginalFilename();</span><br><span class="line">    //截取 .png</span><br><span class="line">    String substring = originalFilename.substring(originalFilename.lastIndexOf(&quot;.&quot;));</span><br><span class="line">    //构造一个新名称</span><br><span class="line">    String filename = IdUtil.simpleUUID() + substring;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    aliOssUtil.upload(file.getBytes(), filename);</span><br><span class="line"></span><br><span class="line">    return  &quot;上传成功&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2024/07/16/pkIhzlR.png" alt="image-20240716233536204"></p><p><img src="https://s21.ax1x.com/2024/07/16/pkI4pOx.png" alt="阿里云banner图"></p><p><img src="https://s21.ax1x.com/2024/07/17/pkI4XHf.png" alt="img"></p><p><img src="https://s21.ax1x.com/2024/07/17/pkI5pCQ.png" alt="SrpingBoot"></p><p><img src="https://s21.ax1x.com/2024/07/18/pkoh3jI.png" alt="下载"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【SpringBoot篇】阿里云OSS--文件存储</title>
      <link href="/posts/2024/2973527110.html"/>
      <url>/posts/2024/2973527110.html</url>
      
        <content type="html"><![CDATA[<h2 id="🌹什么是阿里云OSS"><a href="#🌹什么是阿里云OSS" class="headerlink" title="🌹什么是阿里云OSS"></a>🌹什么是阿里云OSS</h2><p>阿里云对象存储（Alibaba Cloud Object Storage Service，简称OSS）是阿里云提供的海量、安全、低成本、高可靠的云存储服务。用户可以通过简单的API接口在任何时间、任何地点上传和下载数据，适用于图像、音视频、文档、网站等各种类型的数据存储和分发场景。</p><h2 id="⭐阿里云OSS的优点"><a href="#⭐阿里云OSS的优点" class="headerlink" title="⭐阿里云OSS的优点"></a>⭐阿里云OSS的优点</h2><p><strong>高可靠性</strong>：OSS采用了多副本存储和容灾备份机制，确保数据的高可靠性和持久性。<br><strong>安全性</strong>：支持多种安全策略，如访问控制、加密传输等，保障数据的安全性。<br><strong>弹性扩展</strong>：支持按需存储和弹性扩展，用户可以根据实际需求灵活调整存储容量。<br><strong>低成本</strong>：OSS的存储费用低廉，且支持按量付费模式，使用户能够根据实际使用量付费</p><h2 id="🏳️‍🌈为什么要使用云服务OSS"><a href="#🏳️‍🌈为什么要使用云服务OSS" class="headerlink" title="🏳️‍🌈为什么要使用云服务OSS"></a>🏳️‍🌈为什么要使用云服务OSS</h2><p>解决本地存储无法直接访问，本地磁盘空间有限，本地磁盘损坏这3个问题</p><h2 id="🎄使用步骤"><a href="#🎄使用步骤" class="headerlink" title="🎄使用步骤"></a>🎄使用步骤</h2><p><img src="https://s21.ax1x.com/2024/07/16/pkI2Fu8.png" alt="image-20240716215007220"></p><h2 id="文件上传操作"><a href="#文件上传操作" class="headerlink" title="文件上传操作"></a>文件上传操作</h2><hr><blockquote><p>🎈在pom文件中添加下面的代码</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aliyun.sdk.oss</span>&gt;</span>3.10.2<span class="tag">&lt;/<span class="name">aliyun.sdk.oss</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun.sdk.oss&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>🎈本地存储的话 在yml中写明存储地方</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ali:</span></span><br><span class="line">  <span class="attr">spring:</span></span><br><span class="line">    <span class="attr">localhost:</span> <span class="string">D:\Program</span> <span class="string">Files\Project\Test-Project\TEST01\alioosdemo\ali-service\src\main\resources\upload</span></span><br></pre></td></tr></table></figure><blockquote><p>🎈在Controller层进行上传操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/common&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ali.spring.localhost&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span>  String path;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliOssUtil aliOssUtil;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取原始名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="comment">//截取 .png</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">//构造一个新名称  使用Hutool工具类</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> IdUtil.simpleUUID() + substring;</span><br><span class="line"><span class="comment">//新建File对象 进行存储</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(file1);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span>  <span class="string">&quot;上传成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件上传操作（OSS版）"><a href="#文件上传操作（OSS版）" class="headerlink" title="文件上传操作（OSS版）"></a>文件上传操作（OSS版）</h2><blockquote><p>🎈Oss存储 在yml中写明存储地方 <strong>access-key-id</strong>、 <strong>access-key-secret</strong>、<strong>bucket-name</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ali:</span></span><br><span class="line">  <span class="attr">alioos:</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">oss-cn-beijing.aliyuncs.com</span></span><br><span class="line">    <span class="attr">access-key-id:</span> <span class="string">***********</span></span><br><span class="line">    <span class="attr">access-key-secret:</span> <span class="string">***********</span></span><br><span class="line">    <span class="attr">bucket-name:</span> <span class="string">***********</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用@ConfigurationProperties注解读取 properties的数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*<span class="doctag">@Component</span> 表示将该类标识为Bean</span></span><br><span class="line"><span class="comment">*<span class="doctag">@ConfigurationProperties</span>(prefix = &quot;ali.alioos&quot;)用于绑定属性，其中prefix表示所绑定的属性的前缀。</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;ali.alioos&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOssProprtyies</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置类，用于创建AliOssUtil对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> AliOssUtil <span class="title function_">aliOssUtil</span><span class="params">(AliOssProprtyies aliOssProprtyies)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">AliOssUtil</span>(aliOssProprtyies.getEndpoint(),</span><br><span class="line">                    aliOssProprtyies.getAccessKeyId(),</span><br><span class="line">                    aliOssProprtyies.getAccessKeySecret(),</span><br><span class="line">                aliOssProprtyies.getBucketName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>定义阿里云工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOssUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="type">byte</span>[] bytes, String objectName)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建PutObject请求。</span></span><br><span class="line">            ossClient.putObject(bucketName, objectName, <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OSSException oe) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;but was rejected with an error response for some reason.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Message:&quot;</span> + oe.getErrorMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Code:&quot;</span> + oe.getErrorCode());</span><br><span class="line">            System.out.println(<span class="string">&quot;Request ID:&quot;</span> + oe.getRequestId());</span><br><span class="line">            System.out.println(<span class="string">&quot;Host ID:&quot;</span> + oe.getHostId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException ce) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught an ClientException, which means the client encountered &quot;</span></span><br><span class="line">                    + <span class="string">&quot;a serious internal problem while trying to communicate with OSS, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;such as not being able to access the network.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Message:&quot;</span> + ce.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                ossClient.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件访问路径规则 https://BucketName.Endpoint/ObjectName</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;https://&quot;</span>);</span><br><span class="line">        stringBuilder</span><br><span class="line">                .append(bucketName)</span><br><span class="line">                .append(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">                .append(endpoint)</span><br><span class="line">                .append(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                .append(objectName);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;文件上传到:&#123;&#125;&quot;</span>, stringBuilder.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>自定义上传接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AliOssUtil aliOssUtil;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">Upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取原始名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    <span class="comment">//截取 .png</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//构造一个新名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> IdUtil.simpleUUID() + substring;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    aliOssUtil.upload(file.getBytes(), filename);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  <span class="string">&quot;上传成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
